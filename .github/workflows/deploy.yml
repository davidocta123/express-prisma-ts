name: Deploy Node.js App (Docker Hub)

on:
  push:
    branches: [ ci-cd ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: express-prisma-ts # Replace with your desired image name
  CONTAINER_NAME: my-node-app # Choose a name for your running container

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v4
    - name: Deploy via SSH
      with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            docker login -u ${{ env.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${SHORT_SHA}

            docker pull $IMAGE_TAG

            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            docker run \
              -d \
              --restart always \
              -p 80:3000 \
              -e NODE_ENV=production \
              -e PORT=3000 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              --name ${{ env.CONTAINER_NAME }} \
              $IMAGE_TAG

            docker image prune -af
